{"shell":true,"revision":"8b9eca03056eaaf3f440fabc8f1140dafcaf6057","objects":[{"type":null,"source":"lib/edgelixir.ex:3","object_type":"ModuleObject","moduledoc":"Behaviour to build Pregel-like distributed graph processing in Elixir\n","module":"Elixir.Edgelixir","id":"Edgelixir"},{"type":null,"source":"lib/edgelixir/graph_format.ex:3","object_type":"ModuleObject","moduledoc":"Implementations specify how graph data is parsed\n","module":"Elixir.Edgelixir.GraphFormat","id":"Edgelixir.GraphFormat"},{"type":null,"source":"lib/edgelixir/graph_formats/edgelist_simple.ex:5","object_type":"ModuleObject","moduledoc":"A built-in GraphFormat for delimited edge lists, without vertex weights or labels\n\n    1,2\n    2,3\n    3,1\n\nVertex entries must be integers\n\n## Mix Configuration\n\n* `:edgelist_delimiter` (String) Delimiter for source,destination vertices in edge entry. Default is \",\"\n","module":"Elixir.Edgelixir.GraphFormats.EdgelistSimple","id":"Edgelixir.GraphFormats.EdgelistSimple"},{"type":"protocol","source":"lib/edgelixir/graph_input.ex:3","object_type":"ModuleObject","moduledoc":"Specifies how the graph data is loaded\n","module":"Elixir.Edgelixir.GraphInput","id":"Edgelixir.GraphInput"},{"type":"impl","source":"lib/edgelixir/graph_input.ex:16","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Edgelixir.GraphInput.Edgelixir.GraphSources.File","id":"Edgelixir.GraphInput.Edgelixir.GraphSources.File"},{"type":"impl","source":"lib/edgelixir/graph_input.ex:26","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Edgelixir.GraphInput.Edgelixir.GraphSources.URL","id":"Edgelixir.GraphInput.Edgelixir.GraphSources.URL"},{"type":"protocol","source":"lib/edgelixir/graph_output.ex:3","object_type":"ModuleObject","moduledoc":"Implementations specify how the compute result is outputted\n","module":"Elixir.Edgelixir.GraphOutput","id":"Edgelixir.GraphOutput"},{"type":"impl","source":"lib/edgelixir/graph_output.ex:14","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Edgelixir.GraphOutput.Edgelixir.GraphOutputs.Stdout","id":"Edgelixir.GraphOutput.Edgelixir.GraphOutputs.Stdout"},{"type":null,"source":"lib/edgelixir/graph_outputs/stdout.ex:3","object_type":"ModuleObject","moduledoc":"A built-in GraphOutput to print the compute result to stdout\n\n## Arguments\n\nThis ouput takes no arguments\n","module":"Elixir.Edgelixir.GraphOutputs.Stdout","id":"Edgelixir.GraphOutputs.Stdout"},{"type":null,"source":"lib/edgelixir/graph_partition.ex:3","object_type":"ModuleObject","moduledoc":"Implementations specify how the graph is partitioned across the cluster\n","module":"Elixir.Edgelixir.GraphPartition","id":"Edgelixir.GraphPartition"},{"type":null,"source":"lib/edgelixir/graph_sources/file.ex:3","object_type":"ModuleObject","moduledoc":"A built-in GraphSource to load a graph from a file\n\n## Arguments\n\n* `:path` (String) A relative or absolute path to a file. The file must exist on each node.\n","module":"Elixir.Edgelixir.GraphSources.File","id":"Edgelixir.GraphSources.File"},{"type":null,"source":"lib/edgelixir/graph_sources/url.ex:3","object_type":"ModuleObject","moduledoc":"A built-in GraphSource to load a graph from an HTTP/HTTPS URL\n\n## Arguments\n\n* `:url` (String) An http:// or https:// URL that resolves on each node\n\nNote: The URL may be for a distributed file system, such as HDFS via HttpFS\n\n## Todo\n\nThis may be expanded in the future to allow POST data to be passed (e.g. auth tokens, etc.)\n","module":"Elixir.Edgelixir.GraphSources.URL","id":"Edgelixir.GraphSources.URL"},{"type":null,"source":"lib/edgelixir.ex:63","object_type":"ModuleObject","moduledoc":"Provides helper functions that may be used throughout the library\n","module":"Elixir.Edgelixir.Helper","id":"Edgelixir.Helper"},{"type":null,"source":"lib/edgelixir/partition_schemes/edge_cut.ex:6","object_type":"ModuleObject","moduledoc":"A built-in PartitionScheme to partition the graph by vertex (cutting edges)\n\n## Arguments\n\nThis scheme takes no arguments\n\n## Algorithm\n\nnode = vertex.id % number_of_nodes\n","module":"Elixir.Edgelixir.PartitionSchemes.EdgeCut","id":"Edgelixir.PartitionSchemes.EdgeCut"},{"type":null,"source":"lib/edgelixir/superstep.ex:5","object_type":"ModuleObject","moduledoc":"An Elixir OTP GenServer that manages Pregel supersteps on each cluster node\n","module":"Elixir.Edgelixir.Superstep","id":"Edgelixir.Superstep"},{"type":null,"source":"lib/edgelixir/vertex.ex:3","object_type":"ModuleObject","moduledoc":"A wrapper struct for a graph vertex\n","module":"Elixir.Edgelixir.Vertex","id":"Edgelixir.Vertex"},{"type":"def","source":"lib/edgelixir.ex:51","signature":[["opts",[],null]],"object_type":"FunctionObject","name":"parse_config","module_id":"Edgelixir","id":"parse_config/1","doc":"Parses the graph configuration when using the behaviour\n","arity":1},{"type":"def","source":"lib/edgelixir/graph_formats/edgelist_simple.ex:31","signature":[["graph",[],null],["raw_data",[],null]],"object_type":"FunctionObject","name":"store_edge","module_id":"Edgelixir.GraphFormats.EdgelistSimple","id":"store_edge/2","doc":null,"arity":2},{"type":"def","source":"lib/edgelixir/graph_formats/edgelist_simple.ex:19","signature":[["graph",[],null],["raw_data",[],null]],"object_type":"FunctionObject","name":"store_vertex","module_id":"Edgelixir.GraphFormats.EdgelistSimple","id":"store_vertex/2","doc":null,"arity":2},{"type":"def","source":"lib/edgelixir/graph_input.ex:1","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Edgelixir.GraphInput","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/graph_input.ex:1","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Edgelixir.GraphInput","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/graph_input.ex:1","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Edgelixir.GraphInput","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/graph_input.ex:7","signature":[["graph_source",[],null]],"object_type":"FunctionObject","name":"load!","module_id":"Edgelixir.GraphInput","id":"load!/1","doc":"Loads the graph from the source, or raises an exception if unable\n\nTakes a `graph_source`, `graph_format`. Returns a loaded `:digraph`.\n","arity":1},{"type":"def","source":"lib/edgelixir/graph_input.ex:16","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Edgelixir.GraphInput.Edgelixir.GraphSources.File","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/graph_input.ex:17","signature":[["file",[],"Elixir"]],"object_type":"FunctionObject","name":"load!","module_id":"Edgelixir.GraphInput.Edgelixir.GraphSources.File","id":"load!/1","doc":null,"arity":1},{"type":"def","source":"lib/edgelixir/graph_input.ex:26","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Edgelixir.GraphInput.Edgelixir.GraphSources.URL","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/graph_input.ex:27","signature":[["u_r_l",[],"Elixir"]],"object_type":"FunctionObject","name":"load!","module_id":"Edgelixir.GraphInput.Edgelixir.GraphSources.URL","id":"load!/1","doc":null,"arity":1},{"type":"def","source":"lib/edgelixir/graph_output.ex:1","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Edgelixir.GraphOutput","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/graph_output.ex:1","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Edgelixir.GraphOutput","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/graph_output.ex:1","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Edgelixir.GraphOutput","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/graph_output.ex:7","signature":[["data",[],null]],"object_type":"FunctionObject","name":"write!","module_id":"Edgelixir.GraphOutput","id":"write!/1","doc":"Outputs the compute result\n","arity":1},{"type":"def","source":"lib/edgelixir/graph_output.ex:14","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Edgelixir.GraphOutput.Edgelixir.GraphOutputs.Stdout","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/graph_output.ex:15","signature":[["",[],"Elixir"]],"object_type":"FunctionObject","name":"write!","module_id":"Edgelixir.GraphOutput.Edgelixir.GraphOutputs.Stdout","id":"write!/1","doc":null,"arity":1},{"type":"def","source":"lib/edgelixir.ex:67","signature":[],"object_type":"FunctionObject","name":"all_nodes","module_id":"Edgelixir.Helper","id":"all_nodes/0","doc":"Lists all connected nodes, including the current node\n","arity":0},{"type":"def","source":"lib/edgelixir.ex:76","signature":[],"object_type":"FunctionObject","name":"nodes_count","module_id":"Edgelixir.Helper","id":"nodes_count/0","doc":"A count of all connected nodes\n","arity":0},{"type":"def","source":"lib/edgelixir/partition_schemes/edge_cut.ex:18","signature":[["vertex",[],null]],"object_type":"FunctionObject","name":"node_name","module_id":"Edgelixir.PartitionSchemes.EdgeCut","id":"node_name/1","doc":null,"arity":1},{"type":"def","source":"lib/edgelixir/superstep.ex:18","signature":[],"object_type":"FunctionObject","name":"barrier","module_id":"Edgelixir.Superstep","id":"barrier/0","doc":"A distributed synchronization barrier for supersteps or graph loading\n\n## Examples\n\n    # each node waits until all nodes call barrier/0\n    iex> Edgelixir.Superstep.barrier\n    {:ok, 1}\n\n","arity":0},{"type":"def","source":"lib/edgelixir/superstep.ex:3","signature":[["old",[],"Elixir"],["state",[],null],["extra",[],"Elixir"]],"object_type":"FunctionObject","name":"code_change","module_id":"Edgelixir.Superstep","id":"code_change/3","doc":false,"arity":3},{"type":"def","source":"lib/edgelixir/superstep.ex:3","signature":[["msg",[],null],["from",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_call","module_id":"Edgelixir.Superstep","id":"handle_call/3","doc":false,"arity":3},{"type":"def","source":"lib/edgelixir/superstep.ex:3","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_cast","module_id":"Edgelixir.Superstep","id":"handle_cast/2","doc":false,"arity":2},{"type":"def","source":"lib/edgelixir/superstep.ex:3","signature":[["msg",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_info","module_id":"Edgelixir.Superstep","id":"handle_info/2","doc":false,"arity":2},{"type":"def","source":"lib/edgelixir/superstep.ex:3","signature":[["args",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Edgelixir.Superstep","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/edgelixir/superstep.ex:33","signature":[["vertex",[],null],["message",[],null]],"object_type":"FunctionObject","name":"send_message_to_neighbors","module_id":"Edgelixir.Superstep","id":"send_message_to_neighbors/2","doc":"Sends a message to all vertex neighbors\n\n## Arguments:\n\n- `vertex` (%Edgelixir.Vertex) vertex to send message from\n- `message` (Any) message to send to neighboring edges\n\n## Examples\n\n    iex> Edgelixir.Superstep.send_message_to_neighbors(vertex, 1)\n    {:ok, 1}\n\n","arity":2},{"type":"def","source":"lib/edgelixir/superstep.ex:11","signature":[["args",[],null]],"object_type":"FunctionObject","name":"start_link","module_id":"Edgelixir.Superstep","id":"start_link/1","doc":"Starts the superstep supervisor server\n","arity":1},{"type":"def","source":"lib/edgelixir/superstep.ex:3","signature":[["reason",[],"Elixir"],["state",[],"Elixir"]],"object_type":"FunctionObject","name":"terminate","module_id":"Edgelixir.Superstep","id":"terminate/2","doc":false,"arity":2},{"type":"def","source":"lib/edgelixir/superstep.ex:65","signature":[["vertex",[],null]],"object_type":"FunctionObject","name":"update_vertex","module_id":"Edgelixir.Superstep","id":"update_vertex/1","doc":"Updates a vertex value in the underlying representation\n\n## Arguments:\n\n- `vertex` (Edgelixir.Vertex) struct of vertex to update, with new value\n","arity":1},{"type":"def","source":"lib/edgelixir/superstep.ex:52","signature":[["vertex",[],null]],"object_type":"FunctionObject","name":"vote_to_halt","module_id":"Edgelixir.Superstep","id":"vote_to_halt/1","doc":"Called by vertex to remove itself from further processing,\nunless it receives a new incoming message\n\n## Arguments:\n\n- `vertex` (Edgelixir.Vertex) vertex voting to halt\n","arity":1}],"language":"elixir","git_repo_url":"https://github.com/nlap/edgelixir-priv.git","client_version":"0.5.3","client_name":"inch_ex","branch_name":"master","args":[]}